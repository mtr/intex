#! /usr/bin/python
# -*- coding: utf-8 -*-
# $Id$
"""
Copyright (C) 2007 by Martin Thorsen Ranang
"""
__version__ = "$Rev$"
__author__ = "Martin Thorsen Ranang <mtr@ranang.org>"


import logging
import optparse
import os

from intex.index import Index
from intex.parenparser import ParenParser
        
def parse_command_line(command_line_options, usage):
    """Parse the command line according to the possible
    COMMAND_LINE_OPTIONS.
    """
    parser = optparse.OptionParser(usage=usage,
                                   version='%%prog %s' % (__version__))
    for option, description in command_line_options:
        parser.add_option(*option, **description)
        
    # Parse the command line.
    return parser.parse_args()
        
def main():
    """Module mainline (for standalone execution).
    """
    command_line_options = [
        (['-O', '--feedback'],
         {'dest': 'feedback',
          'default': None,
          'metavar': 'FILE',
          'help': 'output the new internal InTeX information to FILE ' \
          '(default: %default)'}),
        (['-o', '--index-output'],
         {'dest': 'index_output',
          'default': None,
          'metavar': 'FILE',
          'help': 'output the new indexing information to FILE ' \
          '(default: %default)'}),
        (['-a', '--acrodef-output'],
         {'dest': 'acrodef_output',
          'default': None,
          'metavar': 'FILE',
          'help': 'output acronym definitions to FILE ' \
          '(default: %default)'}),
        (['-p', '--persondef-output'],
         {'dest': 'persondef_output',
          'default': None,
          'metavar': 'FILE',
          'help': 'output (person) name definitions to FILE ' \
          '(default: %default)'}),
        (['-V', '--verbose'],
         {'dest': 'verbose',
          'default': False,
          'action': 'store_true',
          'help': 'whether or not to output verbose information'}),
        ]

    # Parse the command line options.
    options, args = parse_command_line(command_line_options,
                                       usage='%prog [options] ' \
                                       '<index> [index ...]',)

    # Sort out the name for the basic log.
    logging.root.name = os.path.basename(__file__)
    
    # Configure the logging module.
    logging.basicConfig(format='%(asctime)s: %(levelname)s: %(message)s',
                        level=(options.verbose and logging.INFO or None))

    # Instatiate one Index object per file specified on the command
    # line.
    indices = [Index.from_file(filename) for filename in args]
    
if __name__ == "__main__":
    main()
