#! /usr/bin/python
# -*- coding: utf-8 -*-
# $Id$
"""
Copyright (C) 2007 by Martin Thorsen Ranang
"""
__version__ = "$Rev$"
__author__ = "Martin Thorsen Ranang <mtr@linpro.no>"


import logging
import optparse
import os
import re

TOKEN_COMMENT           = '%'
TOKEN_SHORT_PLURAL_FORM = '#'
TOKEN_ENTRY_META_INFO   = ':'

class IndexEntry(object):
    def to_latex(self):
        raise NotImplementedError

class AcronymEntry(IndexEntry):
    def __init__(self, acronym, full_form, typeset_as=None,
                 plural=None, index_as=None, sort_as=None):
        self.__initials = initials
        self.__last_name = last_name,
        self.__first_name = first_name

class PersonEntry(IndexEntry):
    def __init__(self, initials, last_name, first_name=None,
                 index_as=None, sort_as=None):
        self.__initials = initials
        self.__last_name = last_name,
        self.__first_name = first_name

class PlainEntry(IndexEntry):
    def __init__(self, concept,
                 plural=None, index_as=None, sort_as=None):
        self.__plural = plural
        self.__sub_entry = sub_entry
        
        self.__initials = initials
        self.__last_name = last_name,
        self.__first_name = first_name
        
class Index(list):
    __concept_types = ['ACRONYMS', 'PERSONS', 'CONCEPTS']
    __index_attrbiutes = {
        'name': None,
        }
    __meta_directive_re = re.compile('''
    ^                                   # Starts with
    %s                                  # the comment token,
    \s*                                 # possibly some whitespace,
    (                                   # then either
     (?P<attribute>\w+)\s*              #  an attribute
     =                                  #  sat to
     \s*(?P<value>\w+)                  #  some value,
     |                                  # or
     (?P<context>\*(%s)\*)              #  a context switch
    )                                   # followed by
    \s*                                 # possibly trailing whitespace
    $                                   # at the end.
    ''' % (TOKEN_COMMENT, '|'.join(__concept_types)), re.VERBOSE)
    
    def __init__(self, filename=None, index_name='default'):
        list.__init__(self)
        
        self.__name = index_name
        
    # Accessors for the 'name' property:
    def get_name(self):
        return self.__name
        
    def set_name(self, name):
        self.__name = name
        
    name = property(get_name, set_name, None, 'The name of the index.')

    def handle_meta_directive(self, meta_directive):
        if meta_directive['attribute']:
            setattr(self, meta_directive['attribute'],
                    meta_directive['value'])


    match_handler = {
        __meta_directive_re: handle_meta_directive,
        # FIXME: Continue here!
        }

    @classmethod
    def from_file(cls, filename):
        self = cls()
        
        stream = open(filename, 'r')
        
        for line in stream:
            for matcher in (self.__meta_directive_re, ):
                for match in matcher.finditer(line):
                    match_handler[matcher](match.groupdict())
            #for match in self.__meta_directive_re.finditer(line):


        stream.close()
        
        return self
        
def parse_command_line(command_line_options):
    """Parse the command line according to the possible
    COMMAND_LINE_OPTIONS.
    """
    parser = optparse.OptionParser(usage='%prog [options]...',
                                   version='%%prog %s' % (__version__))
    for option, description in command_line_options:
        parser.add_option(*option, **description)
        
    # Parse the command line.
    return parser.parse_args()
        
def main():
    """Module mainline (for standalone execution).
    """
    command_line_options = [
        (['-O', '--feedback'],
         {'dest': 'feedback',
          'default': None,
          'metavar': 'FILE',
          'help': 'output the new internal InTeX information to FILE ' \
          '(default: %default)'}),
        (['-o', '--index-output'],
         {'dest': 'index_output',
          'default': None,
          'metavar': 'FILE',
          'help': 'output the new indexing information to FILE ' \
          '(default: %default)'}),
        (['-a', '--acrodef-output'],
         {'dest': 'acrodef_output',
          'default': None,
          'metavar': 'FILE',
          'help': 'output acronym definitions to FILE ' \
          '(default: %default)'}),
        (['-p', '--persondef-output'],
         {'dest': 'persondef_output',
          'default': None,
          'metavar': 'FILE',
          'help': 'output (person) name definitions to FILE ' \
          '(default: %default)'}),
        (['-V', '--verbose'],
         {'dest': 'verbose',
          'default': False,
          'action': 'store_true',
          'help': 'whether or not to output verbose information'}),
        ]

    options, args = parse_command_line(command_line_options)

    logging.root.name = os.path.basename(__file__)

    if options.verbose:
        logging.getLogger().setLevel(logging.INFO)

    indices = [Index.from_file(filename) for filename in args]
    
        
if __name__ == "__main__":
    main()
